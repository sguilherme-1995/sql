// error - red, success - green, info - blue, warn - yellow, indent
/**
 * more than 3 arguements supported
 * every type has a indent support
 * divider line
 */

const chalk = require('chalk');
const defaultColorMap = require('./colorMap');
const clog = console.log;

function convertWordToTitleCase(text) {
	return text.charAt(0).toUpperCase() + text.substr(1);
}
function newLine(count) {
	for (let i = 0; i < count; i++) process.stdout.write('\n');
	return this;
}
function tab(count) {
	for (let i = 0; i < count; i++) process.stdout.write('\t');
	return this;
}
function space(count) {
	for (let i = 0; i < count; i++) process.stdout.write(' ');
	return this;
}

function getLogType(type, typeColorMap) {
	const color = typeColorMap.color || 'red';
	const contrastTextColor = typeColorMap.contrastTextColor || 'black';
	const modifier = typeColorMap.modifier || '';

	const badgeStyle = `${contrastTextColor}.bg${convertWordToTitleCase(color)}.bold`;
	const messageStyle = `${color}` + (modifier ? `.${modifier}` : '');
	function logType(...texts) {
		const badgeText = type.toUpperCase();
		const messageText = texts.join('');

		clog(chalk`{${badgeStyle}  ${badgeText} } {${messageStyle} ${messageText}}`);
		return this;
	}
	logType.d = logType;
	logType.m = function(...texts) {
		const messageText = texts.join('');
		clog(chalk`{${messageStyle} ${messageText}}`);
		return this;
	};

	logType.b = function(...texts) {
		const badgeText = texts.join('');
		clog(chalk`{${badgeStyle} ${badgeText}}`);
		return this;
	};
	logType.bm = function(...texts) {
		let badgeText = '';
		let messageText = '';

		if (texts.length > 1) {
			badgeText = texts[0];
			messageText = texts.slice(1).join('');
		} else {
			badgeText = type.toUpperCase();
			messageText = texts[0];
		}
		clog(chalk`{${badgeStyle}  ${badgeText} } {${messageStyle} ${messageText}}`);
		return this;
	};
	logType.nl = newLine;
	logType.tab = tab;
	logType.space = space;
	return logType;
}
const indent = {
	nl: newLine,
	tab: tab,
	space: space
};

module.exports = {
	...Object.keys(defaultColorMap).reduce((accumalator, type) => {
		return Object.assign({}, accumalator, { [type]: getLogType(type, defaultColorMap[type]) });
	}, {}),
	indent
};
